<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>freenice12&#39;s blog on freenice12&#39;s blog</title>
		<link>https://freenice12.github.io/</link>
		<description>Recent content in freenice12&#39;s blog </description>
		<generator>Hugo -- gohugo.io</generator>
		
  		<language>en</language>
		
		<managingEditor>Page(&#34;freenice12&#39;s blog&#34;) (freenice12)</managingEditor>
    	
  		<lastBuildDate>Wed, 21 Apr 2021 21:38:30 +0900</lastBuildDate>
		
		<atom:link href="/" rel="self" type="application/rss+xml" />
		
		<item>
			<title>스칼라로 본 Functional Programming(FP) - 3</title>
			<link>https://freenice12.github.io/post/brief-fp-in-scala-3/</link>
			<pubDate>Wed, 21 Apr 2021 21:38:30 +0900</pubDate>
			<guid>https://freenice12.github.io/post/brief-fp-in-scala-3/</guid>
			<description>스칼라로 본 Functional Programming(FP) - 3 Cats와 함께하는 FP (Cats 문서 내용을 토대로 내용을 전개합니다.) Monad  Monad extends the Applicative type class with a new function flatten. Flatten takes a value in a nested context (eg. F[F[A]] where F is the context) and “joins” the contexts together so that we have a single context (ie. F[A]). The name flatten should remind you of the functions of the same name on many classes in the standard library.</description>
		</item>
      	
		<item>
			<title>Misunderstanding over the TDD</title>
			<link>https://freenice12.github.io/post/misunderstanding-over-the-tdd/</link>
			<pubDate>Tue, 20 Apr 2021 21:24:51 +0900</pubDate>
			<guid>https://freenice12.github.io/post/misunderstanding-over-the-tdd/</guid>
			<description>TDD 오해 - 1  TDD 하는 사람들은 모든 기능을 구현할 때 TDD를(만) 이용해서 구현한다.
 많은 분이 이야기하듯 모든 기능에 TDD를 사용할 필요는 없습니다. 물론 가능은 하겠지만, 시간이나 에너지의 낭비가 될 수 있습니다. 예를 들어 데이터베이스에 저장이 잘 되는지 HTTP 호출은 잘 되는지 등 굳이 테스트하지 않아도 되는 부분이 존재하기 마련입니다. 혹은 HTML에서 내가 그리게 될 요소가 잘 그려지는지, 어느 위치에 그려지는지 등은 꼭 TDD를 통해 작성하지 않아도 직접 테스트해 결과를 확인할 수 있고 피드백도 빠르게 받을 수 있습니다.</description>
		</item>
      	
		<item>
			<title>제스트에서 타입스크립트 테스트 하기(with babel)</title>
			<link>https://freenice12.github.io/post/test-jest-typescript-with-babel/</link>
			<pubDate>Fri, 16 Apr 2021 16:28:56 +0900</pubDate>
			<guid>https://freenice12.github.io/post/test-jest-typescript-with-babel/</guid>
			<description>타입스크립트 테스트하기 준비 $ yarn add --dev jest $ yarn add --dev babel-jest @babel/core @babel/preset-env @babel/preset-typescript @types/jest 타입스크립트를 jest로 테스트 할때 TypeScript를 사용하기 위해서는 ES6+ 하위 호환 및 ts -&amp;gt; js 변환을 위한 babel이란 녀석이 꼭 필요하다고 합니다.
과정  TypeScript를 사용하는 프로젝트인데 jest를 사용하고 싶었다. import부터 제대로 되지 않는다&amp;hellip;
 프론트에서도 테스트를 사용해 내가 원하는 기능은 먼저 테스트해 보고, 화면을 그리는 UI나에게는 매우 어려운 작업은 눈으로 테스트해 보려고 했습니다. 그런데 처음부터 만나게 된 import를 할 수 없다는 오류 메시지.</description>
		</item>
      	
		<item>
			<title>Deprecated Implicit Conversion</title>
			<link>https://freenice12.github.io/post/deprecated-implicit-conversion/</link>
			<pubDate>Mon, 12 Apr 2021 23:24:16 +0900</pubDate>
			<guid>https://freenice12.github.io/post/deprecated-implicit-conversion/</guid>
			<description>스칼라의 Implicit 마법과 작별 준비 스칼라에서 implicit, implicitly가 저 같은 입문자를 괴롭힌다는 소식을 접했지만 이내 Scala 3에서는 사용하지 않아도 충분한 대안이 마련되었다고 합니다. 대안은 다음 글에 작성하도록 하겠습니다(아직은 몰라요).
그럼 implicit이 사라지기 전에 가볍게 한 번 보고 지나가겠습니다.
예제 스칼라를 더 나은 자바로 사용하기 위해서 아래와 같은 코드를 사용했습니다. 이 예제 하나를 위해서는 그럭저럭 작성할 만한 코드같습니다.
먼저 아래 코드를 보시죠.
입장 case class Point(x: Int, y: Int) @tailrec def sumP(xs: List[Point], acc: Point = Point(0, 0)): Point = xs match { case h :: t =&amp;gt; sumP(t, Point(acc.</description>
		</item>
      	
		<item>
			<title>스칼라로 본 Functional Programming(FP) - 2</title>
			<link>https://freenice12.github.io/post/brief-fp-in-scala-2/</link>
			<pubDate>Fri, 09 Apr 2021 10:54:08 +0900</pubDate>
			<guid>https://freenice12.github.io/post/brief-fp-in-scala-2/</guid>
			<description>스칼라로 본 Functional Programming(FP) - 2 Cats와 함께하는 FP (Cats 문서 내용을 토대로 내용을 전개합니다.) Type classes  이전 글에서 Monoid를 이런게 있구나 하고 훑어보았습니다. 이번에는 Functor를 훑어보겠습니다.
 Functor  Functor is a type class that abstracts over type constructors that can be map‘ed over. Examples of such type constructors are List, Option, and Future.
 펑터는 map이 가능한 타입 생성자를 추상화하는 type class 입니다. Monoid에서도 봤듯 type class란 어떤 행위를 할 수 있는지 미리 정해놓은 모음(일단은&amp;hellip;)이라고 봐도 좋습니다.</description>
		</item>
      	
		<item>
			<title>스칼라로 본 Functional Programming(FP) - 1</title>
			<link>https://freenice12.github.io/post/brief-fp-in-scala-1/</link>
			<pubDate>Thu, 08 Apr 2021 21:27:10 +0900</pubDate>
			<guid>https://freenice12.github.io/post/brief-fp-in-scala-1/</guid>
			<description>스칼라로 본 Functional Programming(FP) - 1 서론 FP라는 개념을 알게되고 실제로 프로그래밍 하기 전까지 왜 어려웠는지 생각해보니 바로 &amp;lsquo;FP 개념에 나오는 여러 typeclass 들이 정리가 안돼서&amp;rsquo;가 아니라 이런거 몰라도 일단 코딩해보는 닥코 느낌을 못 가져가서 그렇다고 깨닫게 되었습니다. 그러나 역시 기초는 뭐가 있는지는 알아야 하기에 간략하게 Monoid, Functor, Monad 라는게 이런 것이구나 하고 스윽 넘어가보도록 하겠습니다. 덧붙이자면 저에게도 FP는 생소합니다. 배우면서 정리하고 있습니다.
많은 책들이 행위의 정의 및 코드로 구현 즉 typeclass를 열심히 설명 해줍니다.</description>
		</item>
      	
		<item>
			<title>Total Function</title>
			<link>https://freenice12.github.io/post/total-function/</link>
			<pubDate>Sun, 04 Apr 2021 21:23:58 +0900</pubDate>
			<guid>https://freenice12.github.io/post/total-function/</guid>
			<description>완전 함수 - Scala With Cats library 먼저 제가 좋아하는 분 중 한 분인 케븬 님은 이렇게 조언해 주셨습니다.
 &amp;ldquo;캣츠 라이브러리 사용 전 먼저 해보면 좋은 작업 중 하나는 일반 함수를 완전 함수(Total Function)로 만드는 작업입니다.&amp;rdquo;
 저는 아래와 같은 계획으로 코딩을 해보려고 했습니다.
 자바처럼 스칼라 코드 작성하기 라이브러리(캣츠 이팩트) 사용하기  그런데 위 내용을 토대로 해서 순서를 수정하면,
 자바처럼 스칼라 코드 작성하기  완전 함수로 작성하기   라이브러리(캣츠 이팩트) 사용하기  그럼 완전 함수는 뭔지 먼저 알아보겠습니다.</description>
		</item>
      	
		<item>
			<title>첫 게시물</title>
			<link>https://freenice12.github.io/post/first/</link>
			<pubDate>Tue, 30 Mar 2021 23:21:35 +0900</pubDate>
			<guid>https://freenice12.github.io/post/first/</guid>
			<description>휴고(hugo)를 이용한 github 페이지 작성하기  본 게시물은 mac 환경에서 작성 되었습니다. placeholder($$)안의 내용은 직접 변경하셔야 합니다.
 준비 hugo with brew $ brew install hugo github 먼저, github에 repository를 생성해야 합니다. github에 페이지를 노출하는게 목표이기 때문입니다.
 myblog:  ex) https://github.com/$yourrepo$/myblog 컨텐츠 저장용 저장소입니다.   .github.io:  ex) https://github.com/$yourrepo$/$yourrepo$.github.io 실제 블로그를 게시할 저장소입니다. 단, 이 저장소를 생성할 때 READEME.md 파일을 함께 생성(체크) 해주세요.  추후 블로그에 서브 모듈을 추가할 때 사소한 문제가 생길 수 있습니다.</description>
		</item>
      	
	</channel>
</rss>
